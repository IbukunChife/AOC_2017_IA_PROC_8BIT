// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/19/2018 14:13:41"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ram8
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ram8_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] address;
reg clock;
reg [7:0] data_entrada;
reg esc;
reg ler;
// wires                                               
wire [7:0] data_saida;

// assign statements (if any)                          
ram8 i1 (
// port map - connection between master ports and signals/registers   
	.address(address),
	.clock(clock),
	.data_entrada(data_entrada),
	.data_saida(data_saida),
	.esc(esc),
	.ler(ler)
);
initial 
begin 
#16000 $finish;
end 
// address[ 7 ]
initial
begin
	address[7] = 1'b1;
	address[7] = #3000 1'b0;
end 
// address[ 6 ]
initial
begin
	address[6] = 1'b1;
	address[6] = #3000 1'b0;
end 
// address[ 5 ]
initial
begin
	address[5] = 1'b1;
	address[5] = #3000 1'b0;
end 
// address[ 4 ]
initial
begin
	address[4] = 1'b1;
	address[4] = #3000 1'b0;
end 
// address[ 3 ]
initial
begin
	address[3] = 1'b1;
	address[3] = #3000 1'b0;
end 
// address[ 2 ]
initial
begin
	address[2] = 1'b1;
	address[2] = #3000 1'b0;
	address[2] = #8000 1'b1;
end 
// address[ 1 ]
initial
begin
	address[1] = 1'b1;
	address[1] = #3000 1'b0;
	address[1] = #6000 1'b1;
	address[1] = #2000 1'b0;
	address[1] = #4000 1'b1;
end 
// address[ 0 ]
initial
begin
	address[0] = 1'b1;
	address[0] = #3000 1'b0;
	address[0] = #2000 1'b1;
	address[0] = #2000 1'b0;
	address[0] = #2000 1'b1;
	address[0] = #2000 1'b0;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #1000 1'b1;
	#1000;
end 
// data_entrada[ 7 ]
initial
begin
	data_entrada[7] = 1'b0;
end 
// data_entrada[ 6 ]
initial
begin
	data_entrada[6] = 1'b0;
end 
// data_entrada[ 5 ]
initial
begin
	data_entrada[5] = 1'b0;
end 
// data_entrada[ 4 ]
initial
begin
	data_entrada[4] = 1'b0;
end 
// data_entrada[ 3 ]
initial
begin
	data_entrada[3] = 1'b0;
end 
// data_entrada[ 2 ]
initial
begin
	data_entrada[2] = 1'b0;
	data_entrada[2] = #9000 1'b1;
end 
// data_entrada[ 1 ]
initial
begin
	data_entrada[1] = 1'b0;
	data_entrada[1] = #5000 1'b1;
	data_entrada[1] = #4000 1'b0;
	data_entrada[1] = #4000 1'b1;
end 
// data_entrada[ 0 ]
initial
begin
	data_entrada[0] = 1'b0;
	data_entrada[0] = #3000 1'b1;
	# 2000;
	repeat(2)
	begin
		data_entrada[0] = 1'b0;
		data_entrada[0] = #2000 1'b1;
		# 2000;
	end
	data_entrada[0] = 1'b0;
	data_entrada[0] = #2000 1'b1;
end 

// esc
initial
begin
	esc = 1'b0;
	esc = #3000 1'b1;
	esc = #2000 1'b0;
	esc = #6000 1'b1;
	esc = #2000 1'b0;
end 

// ler
initial
begin
	ler = 1'b0;
	ler = #7000 1'b1;
	ler = #2000 1'b0;
	ler = #4000 1'b1;
	ler = #2000 1'b0;
end 
endmodule

