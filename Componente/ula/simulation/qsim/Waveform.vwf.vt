// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/19/2018 13:45:09"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ula
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ula_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [7:0] dadoA;
reg [7:0] dadoB;
reg [3:0] seletor;
// wires                                               
wire [7:0] resultado;
wire zero;

// assign statements (if any)                          
ula i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.dadoA(dadoA),
	.dadoB(dadoB),
	.resultado(resultado),
	.seletor(seletor),
	.zero(zero)
);
initial 
begin 
#20000 $finish;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #1000 1'b1;
	#1000;
end 
// dadoA[ 7 ]
initial
begin
	dadoA[7] = 1'b0;
end 
// dadoA[ 6 ]
initial
begin
	dadoA[6] = 1'b0;
end 
// dadoA[ 5 ]
initial
begin
	dadoA[5] = 1'b0;
end 
// dadoA[ 4 ]
initial
begin
	dadoA[4] = 1'b0;
end 
// dadoA[ 3 ]
initial
begin
	dadoA[3] = 1'b0;
	dadoA[3] = #17000 1'b1;
end 
// dadoA[ 2 ]
initial
begin
	dadoA[2] = 1'b0;
	dadoA[2] = #9000 1'b1;
	dadoA[2] = #8000 1'b0;
end 
// dadoA[ 1 ]
initial
begin
	dadoA[1] = 1'b0;
	dadoA[1] = #5000 1'b1;
	dadoA[1] = #2000 1'b0;
	dadoA[1] = #4000 1'b1;
	dadoA[1] = #6000 1'b0;
end 
// dadoA[ 0 ]
initial
begin
	dadoA[0] = 1'b0;
	dadoA[0] = #3000 1'b1;
	dadoA[0] = #2000 1'b0;
	dadoA[0] = #6000 1'b1;
	dadoA[0] = #2000 1'b0;
	dadoA[0] = #2000 1'b1;
	dadoA[0] = #2000 1'b0;
	dadoA[0] = #2000 1'b1;
end 
// dadoB[ 7 ]
initial
begin
	dadoB[7] = 1'b0;
end 
// dadoB[ 6 ]
initial
begin
	dadoB[6] = 1'b0;
end 
// dadoB[ 5 ]
initial
begin
	dadoB[5] = 1'b0;
end 
// dadoB[ 4 ]
initial
begin
	dadoB[4] = 1'b0;
end 
// dadoB[ 3 ]
initial
begin
	dadoB[3] = 1'b0;
	dadoB[3] = #17000 1'b1;
end 
// dadoB[ 2 ]
initial
begin
	dadoB[2] = 1'b0;
	dadoB[2] = #9000 1'b1;
	dadoB[2] = #8000 1'b0;
end 
// dadoB[ 1 ]
initial
begin
	dadoB[1] = 1'b0;
	dadoB[1] = #5000 1'b1;
	dadoB[1] = #4000 1'b0;
	dadoB[1] = #4000 1'b1;
	dadoB[1] = #4000 1'b0;
end 
// dadoB[ 0 ]
initial
begin
	dadoB[0] = 1'b0;
	dadoB[0] = #3000 1'b1;
	# 2000;
	repeat(3)
	begin
		dadoB[0] = 1'b0;
		dadoB[0] = #2000 1'b1;
		# 2000;
	end
	dadoB[0] = 1'b0;
	dadoB[0] = #2000 1'b1;
end 
// seletor[ 3 ]
initial
begin
	seletor[3] = 1'b0;
end 
// seletor[ 2 ]
initial
begin
	seletor[2] = 1'b0;
end 
// seletor[ 1 ]
initial
begin
	seletor[1] = 1'b0;
end 
// seletor[ 0 ]
initial
begin
	seletor[0] = 1'b0;
end 
endmodule

