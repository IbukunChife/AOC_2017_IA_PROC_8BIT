// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/13/2018 11:29:31"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ProIA
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ProIA_vlg_vec_tst();
// constants                                           
// general purpose registers
reg ProIAClock;
reg ProIAEnableFlag;
reg ProIAreset;
// wires                                               
wire [7:0] out_ALU_A;
wire [7:0] out_ALU_B;
wire [3:0] out_ALU_OP;
wire [7:0] out_ALU_result;
wire out_ALU_zero;
wire out_AND_A;
wire out_AND_B;
wire out_AND_Result;
wire [7:0] out_BDDado_lido_A;
wire [7:0] out_BDDado_lido_B;
wire [7:0] out_BDReg_dado_escrito;
wire [1:0] out_BDReg_lido_A;
wire [1:0] out_BDReg_lido_B;
wire out_BDReg_reg_escrito;
wire out_Control_clock;
wire out_Control_EscMem;
wire out_Control_EscReg;
wire [1:0] out_Control_Fonte_Pc;
wire out_Control_lermen;
wire out_Control_MemParaReg;
wire [3:0] out_Control_opcode;
wire out_Control_Pc_Cond;
wire out_Control_Pc_flag;
wire out_Control_Ula_fonteA;
wire [1:0] out_Control_Ula_fonteB;
wire [3:0] out_Control_ULAOp;
wire [7:0] out_MEM_INST_address;
wire [7:0] out_MEM_INST_data_out;
wire out_PC_clock;
wire [7:0] out_PC_entrada;
wire out_PC_HabilitaPC;
wire [7:0] out_PC_saida;
wire [7:0] out_Ram_address;
wire [7:0] out_Ram_data_in;
wire [7:0] out_Ram_data_out;
wire out_Ram_esc_mem;
wire out_Ram_ler_mem;
wire out_SystemClock;

// assign statements (if any)                          
ProIA i1 (
// port map - connection between master ports and signals/registers   
	.out_ALU_A(out_ALU_A),
	.out_ALU_B(out_ALU_B),
	.out_ALU_OP(out_ALU_OP),
	.out_ALU_result(out_ALU_result),
	.out_ALU_zero(out_ALU_zero),
	.out_AND_A(out_AND_A),
	.out_AND_B(out_AND_B),
	.out_AND_Result(out_AND_Result),
	.out_BDDado_lido_A(out_BDDado_lido_A),
	.out_BDDado_lido_B(out_BDDado_lido_B),
	.out_BDReg_dado_escrito(out_BDReg_dado_escrito),
	.out_BDReg_lido_A(out_BDReg_lido_A),
	.out_BDReg_lido_B(out_BDReg_lido_B),
	.out_BDReg_reg_escrito(out_BDReg_reg_escrito),
	.out_Control_clock(out_Control_clock),
	.out_Control_EscMem(out_Control_EscMem),
	.out_Control_EscReg(out_Control_EscReg),
	.out_Control_Fonte_Pc(out_Control_Fonte_Pc),
	.out_Control_lermen(out_Control_lermen),
	.out_Control_MemParaReg(out_Control_MemParaReg),
	.out_Control_opcode(out_Control_opcode),
	.out_Control_Pc_Cond(out_Control_Pc_Cond),
	.out_Control_Pc_flag(out_Control_Pc_flag),
	.out_Control_Ula_fonteA(out_Control_Ula_fonteA),
	.out_Control_Ula_fonteB(out_Control_Ula_fonteB),
	.out_Control_ULAOp(out_Control_ULAOp),
	.out_MEM_INST_address(out_MEM_INST_address),
	.out_MEM_INST_data_out(out_MEM_INST_data_out),
	.out_PC_clock(out_PC_clock),
	.out_PC_entrada(out_PC_entrada),
	.out_PC_HabilitaPC(out_PC_HabilitaPC),
	.out_PC_saida(out_PC_saida),
	.out_Ram_address(out_Ram_address),
	.out_Ram_data_in(out_Ram_data_in),
	.out_Ram_data_out(out_Ram_data_out),
	.out_Ram_esc_mem(out_Ram_esc_mem),
	.out_Ram_ler_mem(out_Ram_ler_mem),
	.out_SystemClock(out_SystemClock),
	.ProIAClock(ProIAClock),
	.ProIAEnableFlag(ProIAEnableFlag),
	.ProIAreset(ProIAreset)
);
initial 
begin 
#25000 $finish;
end 

// ProIAClock
initial
begin
	ProIAClock = 1'b1;
	ProIAClock = #1000 1'b0;
	# 1000;
	repeat(11)
	begin
		ProIAClock = 1'b1;
		ProIAClock = #1000 1'b0;
		# 1000;
	end
	ProIAClock = 1'b1;
end 

// ProIAEnableFlag
initial
begin
	ProIAEnableFlag = 1'b1;
end 

// ProIAreset
initial
begin
	ProIAreset = 1'b0;
end 
endmodule

